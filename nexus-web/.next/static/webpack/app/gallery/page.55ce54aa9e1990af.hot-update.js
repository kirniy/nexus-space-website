"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/gallery/page",{

/***/ "(app-pages-browser)/./src/components/ui/DomeGallery.tsx":
/*!*******************************************!*\
  !*** ./src/components/ui/DomeGallery.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ DomeGallery; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _use_gesture_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @use-gesture/react */ \"(app-pages-browser)/./node_modules/@use-gesture/react/dist/use-gesture-react.esm.js\");\n\nvar _s = $RefreshSig$();\n\n\nconst DEFAULT_IMAGES = [\n    \"/photo_2025-09-20_00-35-13.jpeg\",\n    \"/photo_2025-09-20_00-35-14.jpeg\",\n    \"/photo_2025-09-20_00-35-16.jpeg\",\n    \"/photo_2025-09-20_00-35-17.jpeg\",\n    \"/photo_2025-09-20_00-35-18.jpeg\",\n    \"/photo_2025-09-20_00-35-19.jpeg\",\n    \"/photo_2025-09-20_00-35-22.jpeg\",\n    \"/photo_2025-09-20_00-35-23.jpeg\"\n];\nconst DEFAULTS = {\n    maxVerticalRotationDeg: 5,\n    dragSensitivity: 20,\n    enlargeTransitionMs: 300,\n    segments: 35\n};\nconst clamp = (v, min, max)=>Math.min(Math.max(v, min), max);\nconst normalizeAngle = (d)=>(d % 360 + 360) % 360;\nconst wrapAngleSigned = (deg)=>{\n    const a = ((deg + 180) % 360 + 360) % 360;\n    return a - 180;\n};\nconst getDataNumber = (el, name, fallback)=>{\n    var _el_dataset_name;\n    const attr = (_el_dataset_name = el.dataset[name]) !== null && _el_dataset_name !== void 0 ? _el_dataset_name : el.getAttribute(\"data-\".concat(name));\n    const n = attr == null ? NaN : parseFloat(attr);\n    return Number.isFinite(n) ? n : fallback;\n};\nfunction buildItems(pool, seg) {\n    const xCols = Array.from({\n        length: seg\n    }, (_, i)=>-37 + i * 2);\n    const evenYs = [\n        -4,\n        -2,\n        0,\n        2,\n        4\n    ];\n    const oddYs = [\n        -3,\n        -1,\n        1,\n        3,\n        5\n    ];\n    const coords = xCols.flatMap((x, c)=>{\n        const ys = c % 2 === 0 ? evenYs : oddYs;\n        return ys.map((y)=>({\n                x,\n                y,\n                sizeX: 2,\n                sizeY: 2\n            }));\n    });\n    const totalSlots = coords.length;\n    if (pool.length === 0) {\n        return coords.map((c)=>({\n                ...c,\n                src: \"\",\n                alt: \"\"\n            }));\n    }\n    if (pool.length > totalSlots) {\n        console.warn(\"[DomeGallery] Provided image count (\".concat(pool.length, \") exceeds available tiles (\").concat(totalSlots, \"). Some images will not be shown.\"));\n    }\n    const normalizedImages = pool.map((image)=>{\n        if (typeof image === \"string\") {\n            return {\n                src: image,\n                alt: \"\"\n            };\n        }\n        return {\n            src: image.src || \"\",\n            alt: image.alt || \"\"\n        };\n    });\n    const usedImages = Array.from({\n        length: totalSlots\n    }, (_, i)=>normalizedImages[i % normalizedImages.length]);\n    for(let i = 1; i < usedImages.length; i++){\n        if (usedImages[i].src === usedImages[i - 1].src) {\n            for(let j = i + 1; j < usedImages.length; j++){\n                if (usedImages[j].src !== usedImages[i].src) {\n                    const tmp = usedImages[i];\n                    usedImages[i] = usedImages[j];\n                    usedImages[j] = tmp;\n                    break;\n                }\n            }\n        }\n    }\n    return coords.map((c, i)=>({\n            ...c,\n            src: usedImages[i].src,\n            alt: usedImages[i].alt\n        }));\n}\nfunction computeItemBaseRotation(offsetX, offsetY, sizeX, sizeY, segments) {\n    const unit = 360 / segments / 2;\n    const rotateY = unit * (offsetX + (sizeX - 1) / 2);\n    const rotateX = unit * (offsetY - (sizeY - 1) / 2);\n    return {\n        rotateX,\n        rotateY\n    };\n}\nfunction DomeGallery(param) {\n    let { images = DEFAULT_IMAGES, fit = 0.5, fitBasis = \"auto\", minRadius = 600, maxRadius = Infinity, padFactor = 0.25, overlayBlurColor = \"#060010\", maxVerticalRotationDeg = DEFAULTS.maxVerticalRotationDeg, dragSensitivity = DEFAULTS.dragSensitivity, enlargeTransitionMs = DEFAULTS.enlargeTransitionMs, segments = DEFAULTS.segments, dragDampening = 2, openedImageWidth = \"400px\", openedImageHeight = \"400px\", imageBorderRadius = \"30px\", openedImageBorderRadius = \"30px\", grayscale = true } = param;\n    _s();\n    const rootRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mainRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const sphereRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const frameRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const viewerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const scrimRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const focusedElRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const originalTilePositionRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const rotationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        x: 0,\n        y: 0\n    });\n    const startRotRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        x: 0,\n        y: 0\n    });\n    const startPosRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const draggingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const cancelTapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const movedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const inertiaRAF = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const pointerTypeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"mouse\");\n    const tapTargetRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const openingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const openStartedAtRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const lastDragEndAt = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const scrollLockedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const lockScroll = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (scrollLockedRef.current) return;\n        scrollLockedRef.current = true;\n        document.body.classList.add(\"dg-scroll-lock\");\n    }, []);\n    const unlockScroll = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        var _rootRef_current;\n        if (!scrollLockedRef.current) return;\n        if (((_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.getAttribute(\"data-enlarging\")) === \"true\") return;\n        scrollLockedRef.current = false;\n        document.body.classList.remove(\"dg-scroll-lock\");\n    }, []);\n    const items = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const builtItems = buildItems(images, segments);\n        console.log(\"DomeGallery items:\", builtItems);\n        console.log(\"Images array:\", images);\n        return builtItems;\n    }, [\n        images,\n        segments\n    ]);\n    const applyTransform = (xDeg, yDeg)=>{\n        const el = sphereRef.current;\n        if (el) {\n            el.style.transform = \"translateZ(calc(var(--radius) * -1)) rotateX(\".concat(xDeg, \"deg) rotateY(\").concat(yDeg, \"deg)\");\n        }\n    };\n    const lockedRadiusRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const root = rootRef.current;\n        if (!root) return;\n        const ro = new ResizeObserver((entries)=>{\n            var _viewerRef_current;\n            const cr = entries[0].contentRect;\n            const w = Math.max(1, cr.width), h = Math.max(1, cr.height);\n            const minDim = Math.min(w, h), maxDim = Math.max(w, h), aspect = w / h;\n            let basis;\n            switch(fitBasis){\n                case \"min\":\n                    basis = minDim;\n                    break;\n                case \"max\":\n                    basis = maxDim;\n                    break;\n                case \"width\":\n                    basis = w;\n                    break;\n                case \"height\":\n                    basis = h;\n                    break;\n                default:\n                    basis = aspect >= 1.3 ? w : minDim;\n            }\n            let radius = basis * fit;\n            const heightGuard = h * 1.35;\n            radius = Math.min(radius, heightGuard);\n            radius = clamp(radius, minRadius, maxRadius);\n            lockedRadiusRef.current = Math.round(radius);\n            const viewerPad = Math.max(8, Math.round(minDim * padFactor));\n            console.log(\"Setting CSS variables:\", {\n                radius: lockedRadiusRef.current,\n                viewerPad,\n                dimensions: {\n                    w,\n                    h\n                }\n            });\n            root.style.setProperty(\"--radius\", \"\".concat(lockedRadiusRef.current, \"px\"));\n            root.style.setProperty(\"--viewer-pad\", \"\".concat(viewerPad, \"px\"));\n            root.style.setProperty(\"--overlay-blur-color\", overlayBlurColor);\n            root.style.setProperty(\"--tile-radius\", imageBorderRadius);\n            root.style.setProperty(\"--enlarge-radius\", openedImageBorderRadius);\n            root.style.setProperty(\"--image-filter\", grayscale ? \"grayscale(1)\" : \"none\");\n            applyTransform(rotationRef.current.x, rotationRef.current.y);\n            const enlargedOverlay = (_viewerRef_current = viewerRef.current) === null || _viewerRef_current === void 0 ? void 0 : _viewerRef_current.querySelector(\".enlarge\");\n            if (enlargedOverlay && frameRef.current && mainRef.current) {\n                const frameR = frameRef.current.getBoundingClientRect();\n                const mainR = mainRef.current.getBoundingClientRect();\n                const hasCustomSize = openedImageWidth && openedImageHeight;\n                if (hasCustomSize) {\n                    const tempDiv = document.createElement(\"div\");\n                    tempDiv.style.cssText = \"position: absolute; width: \".concat(openedImageWidth, \"; height: \").concat(openedImageHeight, \"; visibility: hidden;\");\n                    document.body.appendChild(tempDiv);\n                    const tempRect = tempDiv.getBoundingClientRect();\n                    document.body.removeChild(tempDiv);\n                    const centeredLeft = frameR.left - mainR.left + (frameR.width - tempRect.width) / 2;\n                    const centeredTop = frameR.top - mainR.top + (frameR.height - tempRect.height) / 2;\n                    enlargedOverlay.style.left = \"\".concat(centeredLeft, \"px\");\n                    enlargedOverlay.style.top = \"\".concat(centeredTop, \"px\");\n                } else {\n                    enlargedOverlay.style.left = \"\".concat(frameR.left - mainR.left, \"px\");\n                    enlargedOverlay.style.top = \"\".concat(frameR.top - mainR.top, \"px\");\n                    enlargedOverlay.style.width = \"\".concat(frameR.width, \"px\");\n                    enlargedOverlay.style.height = \"\".concat(frameR.height, \"px\");\n                }\n            }\n        });\n        ro.observe(root);\n        return ()=>ro.disconnect();\n    }, [\n        fit,\n        fitBasis,\n        minRadius,\n        maxRadius,\n        padFactor,\n        overlayBlurColor,\n        grayscale,\n        imageBorderRadius,\n        openedImageBorderRadius,\n        openedImageWidth,\n        openedImageHeight\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        applyTransform(rotationRef.current.x, rotationRef.current.y);\n    }, []);\n    const stopInertia = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (inertiaRAF.current) {\n            cancelAnimationFrame(inertiaRAF.current);\n            inertiaRAF.current = null;\n        }\n    }, []);\n    const startInertia = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((vx, vy)=>{\n        const MAX_V = 1.4;\n        let vX = clamp(vx, -MAX_V, MAX_V) * 80;\n        let vY = clamp(vy, -MAX_V, MAX_V) * 80;\n        let frames = 0;\n        const d = clamp(dragDampening !== null && dragDampening !== void 0 ? dragDampening : 0.6, 0, 1);\n        const frictionMul = 0.94 + 0.055 * d;\n        const stopThreshold = 0.015 - 0.01 * d;\n        const maxFrames = Math.round(90 + 270 * d);\n        const step = ()=>{\n            vX *= frictionMul;\n            vY *= frictionMul;\n            if (Math.abs(vX) < stopThreshold && Math.abs(vY) < stopThreshold) {\n                inertiaRAF.current = null;\n                return;\n            }\n            if (++frames > maxFrames) {\n                inertiaRAF.current = null;\n                return;\n            }\n            const nextX = clamp(rotationRef.current.x - vY / 200, -maxVerticalRotationDeg, maxVerticalRotationDeg);\n            const nextY = wrapAngleSigned(rotationRef.current.y + vX / 200);\n            rotationRef.current = {\n                x: nextX,\n                y: nextY\n            };\n            applyTransform(nextX, nextY);\n            inertiaRAF.current = requestAnimationFrame(step);\n        };\n        stopInertia();\n        inertiaRAF.current = requestAnimationFrame(step);\n    }, [\n        dragDampening,\n        maxVerticalRotationDeg,\n        stopInertia\n    ]);\n    (0,_use_gesture_react__WEBPACK_IMPORTED_MODULE_2__.useGesture)({\n        onDragStart: (param)=>{\n            let { event } = param;\n            var _evt_target_closest, _evt_target;\n            if (focusedElRef.current) return;\n            stopInertia();\n            const evt = event;\n            pointerTypeRef.current = evt.pointerType || \"mouse\";\n            if (pointerTypeRef.current === \"touch\") evt.preventDefault();\n            if (pointerTypeRef.current === \"touch\") lockScroll();\n            draggingRef.current = true;\n            cancelTapRef.current = false;\n            movedRef.current = false;\n            startRotRef.current = {\n                ...rotationRef.current\n            };\n            startPosRef.current = {\n                x: evt.clientX,\n                y: evt.clientY\n            };\n            const potential = (_evt_target_closest = (_evt_target = evt.target).closest) === null || _evt_target_closest === void 0 ? void 0 : _evt_target_closest.call(_evt_target, \".item__image\");\n            tapTargetRef.current = potential || null;\n        },\n        onDrag: (param)=>{\n            let { event, last, velocity: velArr = [\n                0,\n                0\n            ], direction: dirArr = [\n                0,\n                0\n            ], movement } = param;\n            if (focusedElRef.current || !draggingRef.current || !startPosRef.current) return;\n            const evt = event;\n            if (pointerTypeRef.current === \"touch\") evt.preventDefault();\n            const dxTotal = evt.clientX - startPosRef.current.x;\n            const dyTotal = evt.clientY - startPosRef.current.y;\n            if (!movedRef.current) {\n                const dist2 = dxTotal * dxTotal + dyTotal * dyTotal;\n                if (dist2 > 16) movedRef.current = true;\n            }\n            const nextX = clamp(startRotRef.current.x - dyTotal / dragSensitivity, -maxVerticalRotationDeg, maxVerticalRotationDeg);\n            const nextY = startRotRef.current.y + dxTotal / dragSensitivity;\n            const cur = rotationRef.current;\n            if (cur.x !== nextX || cur.y !== nextY) {\n                rotationRef.current = {\n                    x: nextX,\n                    y: nextY\n                };\n                applyTransform(nextX, nextY);\n            }\n            if (last) {\n                draggingRef.current = false;\n                let isTap = false;\n                if (startPosRef.current) {\n                    const dx = evt.clientX - startPosRef.current.x;\n                    const dy = evt.clientY - startPosRef.current.y;\n                    const dist2 = dx * dx + dy * dy;\n                    const TAP_THRESH_PX = pointerTypeRef.current === \"touch\" ? 10 : 6;\n                    if (dist2 <= TAP_THRESH_PX * TAP_THRESH_PX) {\n                        isTap = true;\n                    }\n                }\n                let [vMagX, vMagY] = velArr;\n                const [dirX, dirY] = dirArr;\n                let vx = vMagX * dirX;\n                let vy = vMagY * dirY;\n                if (!isTap && Math.abs(vx) < 0.001 && Math.abs(vy) < 0.001 && Array.isArray(movement)) {\n                    const [mx, my] = movement;\n                    vx = mx / dragSensitivity * 0.02;\n                    vy = my / dragSensitivity * 0.02;\n                }\n                if (!isTap && (Math.abs(vx) > 0.005 || Math.abs(vy) > 0.005)) {\n                    startInertia(vx, vy);\n                }\n                startPosRef.current = null;\n                cancelTapRef.current = !isTap;\n                if (isTap && tapTargetRef.current && !focusedElRef.current) {\n                    openItemFromElement(tapTargetRef.current);\n                }\n                tapTargetRef.current = null;\n                if (cancelTapRef.current) setTimeout(()=>cancelTapRef.current = false, 120);\n                if (pointerTypeRef.current === \"touch\") unlockScroll();\n                if (movedRef.current) lastDragEndAt.current = performance.now();\n                movedRef.current = false;\n            }\n        }\n    }, {\n        target: mainRef,\n        eventOptions: {\n            passive: false\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const scrim = scrimRef.current;\n        if (!scrim) return;\n        const close = ()=>{\n            var _viewerRef_current;\n            if (performance.now() - openStartedAtRef.current < 250) return;\n            const el = focusedElRef.current;\n            if (!el) return;\n            const parent = el.parentElement;\n            const overlay = (_viewerRef_current = viewerRef.current) === null || _viewerRef_current === void 0 ? void 0 : _viewerRef_current.querySelector(\".enlarge\");\n            if (!overlay) return;\n            const refDiv = parent.querySelector(\".item__image--reference\");\n            const originalPos = originalTilePositionRef.current;\n            if (!originalPos) {\n                var _rootRef_current;\n                overlay.remove();\n                if (refDiv) refDiv.remove();\n                parent.style.setProperty(\"--rot-y-delta\", \"0deg\");\n                parent.style.setProperty(\"--rot-x-delta\", \"0deg\");\n                el.style.visibility = \"\";\n                el.style.zIndex = 0;\n                focusedElRef.current = null;\n                (_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.removeAttribute(\"data-enlarging\");\n                openingRef.current = false;\n                return;\n            }\n            const currentRect = overlay.getBoundingClientRect();\n            const rootRect = rootRef.current.getBoundingClientRect();\n            const originalPosRelativeToRoot = {\n                left: originalPos.left - rootRect.left,\n                top: originalPos.top - rootRect.top,\n                width: originalPos.width,\n                height: originalPos.height\n            };\n            const overlayRelativeToRoot = {\n                left: currentRect.left - rootRect.left,\n                top: currentRect.top - rootRect.top,\n                width: currentRect.width,\n                height: currentRect.height\n            };\n            const animatingOverlay = document.createElement(\"div\");\n            animatingOverlay.className = \"enlarge-closing\";\n            animatingOverlay.style.cssText = \"\\n        position: absolute;\\n        left: \".concat(overlayRelativeToRoot.left, \"px;\\n        top: \").concat(overlayRelativeToRoot.top, \"px;\\n        width: \").concat(overlayRelativeToRoot.width, \"px;\\n        height: \").concat(overlayRelativeToRoot.height, \"px;\\n        z-index: 9999;\\n        border-radius: \").concat(openedImageBorderRadius, \";\\n        overflow: hidden;\\n        box-shadow: 0 10px 30px rgba(0,0,0,.35);\\n        transition: all \").concat(enlargeTransitionMs, \"ms ease-out;\\n        pointer-events: none;\\n        margin: 0;\\n        transform: none;\\n        filter: \").concat(grayscale ? \"grayscale(1)\" : \"none\", \";\\n      \");\n            const originalImg = overlay.querySelector(\"img\");\n            if (originalImg) {\n                const img = originalImg.cloneNode();\n                img.style.cssText = \"width: 100%; height: 100%; object-fit: cover;\";\n                animatingOverlay.appendChild(img);\n            }\n            overlay.remove();\n            rootRef.current.appendChild(animatingOverlay);\n            void animatingOverlay.getBoundingClientRect();\n            requestAnimationFrame(()=>{\n                animatingOverlay.style.left = originalPosRelativeToRoot.left + \"px\";\n                animatingOverlay.style.top = originalPosRelativeToRoot.top + \"px\";\n                animatingOverlay.style.width = originalPosRelativeToRoot.width + \"px\";\n                animatingOverlay.style.height = originalPosRelativeToRoot.height + \"px\";\n                animatingOverlay.style.opacity = \"0\";\n            });\n            const cleanup = ()=>{\n                animatingOverlay.remove();\n                originalTilePositionRef.current = null;\n                if (refDiv) refDiv.remove();\n                parent.style.transition = \"none\";\n                el.style.transition = \"none\";\n                parent.style.setProperty(\"--rot-y-delta\", \"0deg\");\n                parent.style.setProperty(\"--rot-x-delta\", \"0deg\");\n                requestAnimationFrame(()=>{\n                    var _rootRef_current;\n                    el.style.visibility = \"\";\n                    el.style.opacity = \"0\";\n                    el.style.zIndex = 0;\n                    focusedElRef.current = null;\n                    (_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.removeAttribute(\"data-enlarging\");\n                    requestAnimationFrame(()=>{\n                        parent.style.transition = \"\";\n                        el.style.transition = \"opacity 300ms ease-out\";\n                        requestAnimationFrame(()=>{\n                            el.style.opacity = \"1\";\n                            setTimeout(()=>{\n                                var _rootRef_current;\n                                el.style.transition = \"\";\n                                el.style.opacity = \"\";\n                                openingRef.current = false;\n                                if (!draggingRef.current && ((_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.getAttribute(\"data-enlarging\")) !== \"true\") {\n                                    document.body.classList.remove(\"dg-scroll-lock\");\n                                }\n                            }, 300);\n                        });\n                    });\n                });\n            };\n            animatingOverlay.addEventListener(\"transitionend\", cleanup, {\n                once: true\n            });\n        };\n        scrim.addEventListener(\"click\", close);\n        const onKey = (e)=>{\n            if (e.key === \"Escape\") close();\n        };\n        window.addEventListener(\"keydown\", onKey);\n        return ()=>{\n            scrim.removeEventListener(\"click\", close);\n            window.removeEventListener(\"keydown\", onKey);\n        };\n    }, [\n        enlargeTransitionMs,\n        openedImageBorderRadius,\n        grayscale\n    ]);\n    const openItemFromElement = (el)=>{\n        var _el_querySelector, _el_querySelector1;\n        if (cancelTapRef.current) return;\n        if (openingRef.current) return;\n        openingRef.current = true;\n        openStartedAtRef.current = performance.now();\n        lockScroll();\n        const parent = el.parentElement;\n        focusedElRef.current = el;\n        el.setAttribute(\"data-focused\", \"true\");\n        const offsetX = getDataNumber(parent, \"offsetX\", 0);\n        const offsetY = getDataNumber(parent, \"offsetY\", 0);\n        const sizeX = getDataNumber(parent, \"sizeX\", 2);\n        const sizeY = getDataNumber(parent, \"sizeY\", 2);\n        const parentRot = computeItemBaseRotation(offsetX, offsetY, sizeX, sizeY, segments);\n        const parentY = normalizeAngle(parentRot.rotateY);\n        const globalY = normalizeAngle(rotationRef.current.y);\n        let rotY = -(parentY + globalY) % 360;\n        if (rotY < -180) rotY += 360;\n        const rotX = -parentRot.rotateX - rotationRef.current.x;\n        parent.style.setProperty(\"--rot-y-delta\", \"\".concat(rotY, \"deg\"));\n        parent.style.setProperty(\"--rot-x-delta\", \"\".concat(rotX, \"deg\"));\n        const refDiv = document.createElement(\"div\");\n        refDiv.className = \"item__image item__image--reference opacity-0\";\n        refDiv.style.transform = \"rotateX(\".concat(-parentRot.rotateX, \"deg) rotateY(\").concat(-parentRot.rotateY, \"deg)\");\n        parent.appendChild(refDiv);\n        const tileR = refDiv.getBoundingClientRect();\n        const mainR = mainRef.current.getBoundingClientRect();\n        const frameR = frameRef.current.getBoundingClientRect();\n        originalTilePositionRef.current = {\n            left: tileR.left,\n            top: tileR.top,\n            width: tileR.width,\n            height: tileR.height\n        };\n        el.style.visibility = \"hidden\";\n        el.style.zIndex = 0;\n        const overlay = document.createElement(\"div\");\n        overlay.className = \"enlarge\";\n        overlay.style.cssText = \"position:absolute; left:\".concat(frameR.left - mainR.left, \"px; top:\").concat(frameR.top - mainR.top, \"px; width:\").concat(frameR.width, \"px; height:\").concat(frameR.height, \"px; opacity:0; z-index:30; will-change:transform,opacity; transform-origin:top left; transition:transform \").concat(enlargeTransitionMs, \"ms ease, opacity \").concat(enlargeTransitionMs, \"ms ease; border-radius:\").concat(openedImageBorderRadius, \"; overflow:hidden; box-shadow:0 10px 30px rgba(0,0,0,.35);\");\n        const rawSrc = parent.dataset.src || ((_el_querySelector = el.querySelector(\"img\")) === null || _el_querySelector === void 0 ? void 0 : _el_querySelector.src) || \"\";\n        const rawAlt = parent.dataset.alt || ((_el_querySelector1 = el.querySelector(\"img\")) === null || _el_querySelector1 === void 0 ? void 0 : _el_querySelector1.alt) || \"\";\n        const img = document.createElement(\"img\");\n        img.src = rawSrc;\n        img.alt = rawAlt;\n        img.style.cssText = \"width:100%; height:100%; object-fit:cover; filter:\".concat(grayscale ? \"grayscale(1)\" : \"none\", \";\");\n        overlay.appendChild(img);\n        viewerRef.current.appendChild(overlay);\n        const tx0 = tileR.left - frameR.left;\n        const ty0 = tileR.top - frameR.top;\n        const sx0 = tileR.width / frameR.width;\n        const sy0 = tileR.height / frameR.height;\n        overlay.style.transform = \"translate(\".concat(tx0, \"px, \").concat(ty0, \"px) scale(\").concat(sx0, \", \").concat(sy0, \")\");\n        requestAnimationFrame(()=>{\n            var _rootRef_current;\n            overlay.style.opacity = \"1\";\n            overlay.style.transform = \"translate(0px, 0px) scale(1, 1)\";\n            (_rootRef_current = rootRef.current) === null || _rootRef_current === void 0 ? void 0 : _rootRef_current.setAttribute(\"data-enlarging\", \"true\");\n        });\n        const wantsResize = openedImageWidth || openedImageHeight;\n        if (wantsResize) {\n            const onFirstEnd = (ev)=>{\n                if (ev.propertyName !== \"transform\") return;\n                overlay.removeEventListener(\"transitionend\", onFirstEnd);\n                const prevTransition = overlay.style.transition;\n                overlay.style.transition = \"none\";\n                const tempWidth = openedImageWidth || \"\".concat(frameR.width, \"px\");\n                const tempHeight = openedImageHeight || \"\".concat(frameR.height, \"px\");\n                overlay.style.width = tempWidth;\n                overlay.style.height = tempHeight;\n                const newRect = overlay.getBoundingClientRect();\n                overlay.style.width = frameR.width + \"px\";\n                overlay.style.height = frameR.height + \"px\";\n                void overlay.offsetWidth;\n                overlay.style.transition = \"left \".concat(enlargeTransitionMs, \"ms ease, top \").concat(enlargeTransitionMs, \"ms ease, width \").concat(enlargeTransitionMs, \"ms ease, height \").concat(enlargeTransitionMs, \"ms ease\");\n                const centeredLeft = frameR.left - mainR.left + (frameR.width - newRect.width) / 2;\n                const centeredTop = frameR.top - mainR.top + (frameR.height - newRect.height) / 2;\n                requestAnimationFrame(()=>{\n                    overlay.style.left = \"\".concat(centeredLeft, \"px\");\n                    overlay.style.top = \"\".concat(centeredTop, \"px\");\n                    overlay.style.width = tempWidth;\n                    overlay.style.height = tempHeight;\n                });\n                const cleanupSecond = ()=>{\n                    overlay.removeEventListener(\"transitionend\", cleanupSecond);\n                    overlay.style.transition = prevTransition;\n                };\n                overlay.addEventListener(\"transitionend\", cleanupSecond, {\n                    once: true\n                });\n            };\n            overlay.addEventListener(\"transitionend\", onFirstEnd);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        return ()=>{\n            document.body.classList.remove(\"dg-scroll-lock\");\n        };\n    }, []);\n    const cssStyles = \"\\n    .sphere-root {\\n      --radius: \".concat(currentRadius, 'px;\\n      --viewer-pad: 72px;\\n      --circ: calc(var(--radius) * 3.14);\\n      --rot-y: calc((360deg / var(--segments-x)) / 2);\\n      --rot-x: calc((360deg / var(--segments-y)) / 2);\\n      --item-width: calc(var(--circ) / var(--segments-x));\\n      --item-height: calc(var(--circ) / var(--segments-y));\\n    }\\n\\n    .sphere-root * { box-sizing: border-box; }\\n    .sphere, .sphere-item, .item__image { transform-style: preserve-3d; }\\n\\n    .stage {\\n      width: 100%;\\n      height: 100%;\\n      display: grid;\\n      place-items: center;\\n      position: absolute;\\n      inset: 0;\\n      margin: auto;\\n      perspective: calc(var(--radius) * 2);\\n      perspective-origin: 50% 50%;\\n    }\\n\\n    .sphere {\\n      transform: translateZ(calc(var(--radius) * -1));\\n      will-change: transform;\\n      position: absolute;\\n      /* Debug: make sphere visible */\\n      width: 200px;\\n      height: 200px;\\n      pointer-events: none;\\n    }\\n\\n    .sphere-item {\\n      width: calc(var(--item-width) * var(--item-size-x));\\n      height: calc(var(--item-height) * var(--item-size-y));\\n      position: absolute;\\n      top: -999px;\\n      bottom: -999px;\\n      left: -999px;\\n      right: -999px;\\n      margin: auto;\\n      transform-origin: 50% 50%;\\n      backface-visibility: hidden;\\n      transition: transform 300ms;\\n      transform: rotateY(calc(var(--rot-y) * (var(--offset-x) + ((var(--item-size-x) - 1) / 2)) + var(--rot-y-delta, 0deg)))\\n                 rotateX(calc(var(--rot-x) * (var(--offset-y) - ((var(--item-size-y) - 1) / 2)) + var(--rot-x-delta, 0deg)))\\n                 translateZ(var(--radius));\\n    }\\n\\n    .sphere-root[data-enlarging=\"true\"] .scrim {\\n      opacity: 1 !important;\\n      pointer-events: all !important;\\n    }\\n\\n    @media (max-aspect-ratio: 1/1) {\\n      .viewer-frame {\\n        height: auto !important;\\n        width: 100% !important;\\n      }\\n    }\\n\\n    /* body.dg-scroll-lock {\\n      position: fixed !important;\\n      top: 0;\\n      left: 0;\\n      width: 100% !important;\\n      height: 100% !important;\\n      overflow: hidden !important;\\n      touch-action: none !important;\\n      overscroll-behavior: contain !important;\\n    } */\\n    .item__image {\\n      position: absolute;\\n      inset: 10px;\\n      border-radius: var(--tile-radius, 12px);\\n      overflow: hidden;\\n      cursor: pointer;\\n      backface-visibility: hidden;\\n      -webkit-backface-visibility: hidden;\\n      transition: transform 300ms;\\n      pointer-events: auto;\\n      -webkit-transform: translateZ(0);\\n      transform: translateZ(0);\\n    }\\n    .item__image--reference {\\n      position: absolute;\\n      inset: 10px;\\n      pointer-events: none;\\n    }\\n  ');\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"style\", {\n                dangerouslySetInnerHTML: {\n                    __html: cssStyles\n                }\n            }, void 0, false, {\n                fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                lineNumber: 754,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: rootRef,\n                className: \"sphere-root relative w-full h-full bg-red-500/10\",\n                style: {\n                    [\"--segments-x\"]: segments,\n                    [\"--segments-y\"]: segments,\n                    [\"--overlay-blur-color\"]: overlayBlurColor,\n                    [\"--tile-radius\"]: imageBorderRadius,\n                    [\"--enlarge-radius\"]: openedImageBorderRadius,\n                    [\"--image-filter\"]: grayscale ? \"grayscale(1)\" : \"none\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                    ref: mainRef,\n                    className: \"absolute inset-0 grid place-items-center overflow-hidden select-none bg-green-500/10\",\n                    style: {\n                        touchAction: \"none\",\n                        WebkitUserSelect: \"none\",\n                        pointerEvents: \"auto\",\n                        zIndex: 1\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"stage bg-blue-500/10\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                ref: sphereRef,\n                                className: \"sphere bg-yellow-500/10\",\n                                children: items.map((it, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"sphere-item absolute m-auto\",\n                                        \"data-src\": it.src,\n                                        \"data-alt\": it.alt,\n                                        \"data-offset-x\": it.x,\n                                        \"data-offset-y\": it.y,\n                                        \"data-size-x\": it.sizeX,\n                                        \"data-size-y\": it.sizeY,\n                                        style: {\n                                            [\"--offset-x\"]: it.x,\n                                            [\"--offset-y\"]: it.y,\n                                            [\"--item-size-x\"]: it.sizeX,\n                                            [\"--item-size-y\"]: it.sizeY,\n                                            top: \"-999px\",\n                                            bottom: \"-999px\",\n                                            left: \"-999px\",\n                                            right: \"-999px\"\n                                        },\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"item__image absolute block overflow-hidden cursor-pointer bg-gray-200 transition-transform duration-300\",\n                                            role: \"button\",\n                                            tabIndex: 0,\n                                            \"aria-label\": it.alt || \"Open image\",\n                                            onClick: (e)=>{\n                                                if (performance.now() - lastDragEndAt.current < 80) return;\n                                                openItemFromElement(e.currentTarget);\n                                            },\n                                            onTouchEnd: (e)=>{\n                                                if (performance.now() - lastDragEndAt.current < 80) return;\n                                                openItemFromElement(e.currentTarget);\n                                            },\n                                            style: {\n                                                inset: \"10px\",\n                                                borderRadius: \"var(--tile-radius, \".concat(imageBorderRadius, \")\"),\n                                                backfaceVisibility: \"hidden\"\n                                            },\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                                src: it.src,\n                                                draggable: false,\n                                                alt: it.alt,\n                                                className: \"w-full h-full object-cover pointer-events-none\",\n                                                style: {\n                                                    backfaceVisibility: \"hidden\",\n                                                    filter: \"var(--image-filter, \".concat(grayscale ? \"grayscale(1)\" : \"none\", \")\")\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                                                lineNumber: 823,\n                                                columnNumber: 21\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                                            lineNumber: 804,\n                                            columnNumber: 19\n                                        }, this)\n                                    }, \"\".concat(it.x, \",\").concat(it.y, \",\").concat(i), false, {\n                                        fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                                        lineNumber: 782,\n                                        columnNumber: 17\n                                    }, this))\n                            }, void 0, false, {\n                                fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                                lineNumber: 780,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                            lineNumber: 779,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"absolute inset-0 m-auto z-[3] pointer-events-none\",\n                            style: {\n                                backgroundImage: \"radial-gradient(rgba(235, 235, 235, 0) 65%, var(--overlay-blur-color, \".concat(overlayBlurColor, \") 100%)\")\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                            lineNumber: 839,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"absolute inset-0 m-auto z-[3] pointer-events-none\",\n                            style: {\n                                WebkitMaskImage: \"radial-gradient(rgba(235, 235, 235, 0) 70%, var(--overlay-blur-color, \".concat(overlayBlurColor, \") 90%)\"),\n                                maskImage: \"radial-gradient(rgba(235, 235, 235, 0) 70%, var(--overlay-blur-color, \".concat(overlayBlurColor, \") 90%)\"),\n                                backdropFilter: \"blur(3px)\"\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                            lineNumber: 846,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"absolute left-0 right-0 top-0 h-[120px] z-[5] pointer-events-none rotate-180\",\n                            style: {\n                                background: \"linear-gradient(to bottom, transparent, var(--overlay-blur-color, \".concat(overlayBlurColor, \"))\")\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                            lineNumber: 855,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"absolute left-0 right-0 bottom-0 h-[120px] z-[5] pointer-events-none\",\n                            style: {\n                                background: \"linear-gradient(to bottom, transparent, var(--overlay-blur-color, \".concat(overlayBlurColor, \"))\")\n                            }\n                        }, void 0, false, {\n                            fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                            lineNumber: 861,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            ref: viewerRef,\n                            className: \"absolute inset-0 z-20 pointer-events-none flex items-center justify-center\",\n                            style: {\n                                padding: \"var(--viewer-pad)\"\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    ref: scrimRef,\n                                    className: \"scrim absolute inset-0 z-10 pointer-events-none opacity-0 transition-opacity duration-500\",\n                                    style: {\n                                        background: \"rgba(0, 0, 0, 0.4)\",\n                                        backdropFilter: \"blur(3px)\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                                    lineNumber: 873,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    ref: frameRef,\n                                    className: \"viewer-frame h-full aspect-square flex\",\n                                    style: {\n                                        borderRadius: \"var(--enlarge-radius, \".concat(openedImageBorderRadius, \")\")\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                                    lineNumber: 881,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                            lineNumber: 868,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                    lineNumber: 769,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/kirniy/dev/nexus-website/nexus-web/src/components/ui/DomeGallery.tsx\",\n                lineNumber: 755,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_s(DomeGallery, \"xNnrqRuvZVMUudP+IMWRHoj1fw0=\", false, function() {\n    return [\n        _use_gesture_react__WEBPACK_IMPORTED_MODULE_2__.useGesture\n    ];\n});\n_c = DomeGallery;\nvar _c;\n$RefreshReg$(_c, \"DomeGallery\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/ui/DomeGallery.tsx\n"));

/***/ })

});